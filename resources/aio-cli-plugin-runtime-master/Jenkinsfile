def ciHasEmailRecipients(recipientProvider) {
    def recipients = emailextrecipients([[$class: "${recipientProvider}"]])
    
    return (recipients != null && !recipients.isEmpty())
}

def ciSendEmail(unicode_icon, status_text, recipientProvider = "DevelopersRecipientProvider", to = null, replyTo = "${params.EMAIL_REPLY_TO}") {
    if (params.DEBUG) {
        echo "ciSendEmail.unicode_icon - ${unicode_icon}"
        echo "ciSendEmail.status_text - ${status_text}"
        echo "ciSendEmail.recipientProvider - ${recipientProvider}"
        echo "ciSendEmail.to - ${to}"
        echo "ciSendEmail.replyTo - ${replyTo}"
    }
    if (params.NO_EMAIL) {
        echo "ciSendEmail.NO_EMAIL - ${env.NO_EMAIL}"
        return
    }

    // Presence of CHANGE_ID signifies we are in a PR.
    // If we are not in a PR, we have to set the email explicitly,
    // because when we do a Github "Squash and Merge" of a PR into a 
    // branch (e.g. master), Github sets the committer email to 
    // "noreply@github.com" (the Git plugin grabs this from a Github 
    // API call/hook). This email address will not be sent to by Jenkins.
    //
    // GIT_COMMITTER_EMAIL is derived from the git log itself, so it
    // doesn't have this issue.
    if (!env.CHANGE_ID || !ciHasEmailRecipients(recipientProvider)) { 
        to = GIT_COMMITTER_EMAIL
        echo "Email recipient list not found, setting recipient to ${to}"
    }

    def recipientProviders = [[$class: "${recipientProvider}"]];

    emailext (
        subject: "${unicode_icon} Build ${status_text} - ${env.JOB_NAME} [Build #${env.BUILD_NUMBER}]",
        body: """
        <h2>Change</h2><p><a href='${GIT_CHANGE_URL}'>${GIT_COMMIT_MESSAGE}</a> by <a href='mailto:${GIT_COMMITTER_EMAIL}'>${GIT_COMMITTER_NAME}</a></p>
        <h2>Console Output</h2><p><a href='${env.BUILD_URL}'>${env.JOB_NAME} [Build #${env.BUILD_NUMBER}]</a></p>
        """,
        mimeType: "text/html",
        recipientProviders: recipientProviders,
        to: to,
        replyTo: replyTo
    )                        
}

def ciSendSlack(color, status_text, status_icon) {
    if (params.DEBUG) {
        echo "ciSendSlack.color - ${color}"
        echo "ciSendSlack.status_text - ${status_text}"
        echo "ciSendSlack.status_icon - ${status_icon}"
    }
    if (params.NO_SLACK) {
        echo "ciSendSlack.NO_SLACK - ${env.NO_SLACK}"
        return
    }

    slackSend (color: "${color}",
        channel: "${params.SLACK_CHANNEL}",
        message: "*${status_text}:* ${status_icon} <${env.BUILD_URL}|${env.JOB_NAME}/#${env.BUILD_NUMBER}>\n*<${GIT_CHANGE_URL}|${GIT_COMMIT_MESSAGE}>* by <mailto:${GIT_COMMITTER_EMAIL}|${GIT_COMMITTER_NAME}>\n")
}

def onAborted(message = '') {
    echo "post.aborted: Sending message to Slack"
    ciSendSlack("${env.SLACK_COLOR_WARNING}", "ABORTED", ":no_entry:")

    echo "post.aborted: Sending email notifications"                        
    ciSendEmail("\u26D4", "aborted", "RequesterRecipientProvider")
}

def onFailed(message = '') {
    echo "post.failure: Sending message to Slack"
    ciSendSlack("${env.SLACK_COLOR_DANGER}", "FAILED", ":x:")
    
    echo "post.failure: Sending email notifications"
    ciSendEmail("\u274C", "failed", "FailingTestSuspectsRecipientProvider")
}

def onSuccess(message = '') {
    echo "post.success: Sending message to Slack"
    ciSendSlack("${env.SLACK_COLOR_GOOD}", "SUCCESS", ":white_check_mark:")

    echo "post.success: Sending email notifications"
    ciSendEmail("\u2705", "success", "DevelopersRecipientProvider")
}

def command(command) {
    if (isUnix()) {
        sh command
    } else {
        bat command
    }
}

pipeline {
    // agent { label "linux || windows"}
    agent { label "linux"}
    tools {
        nodejs "NodeJS-10"
    }

    parameters {
        // All these parameters are configurable in the Jenkins Job itself
        string(name: 'SLACK_CHANNEL',
            description: 'Default Slack channel to send messages to',
            defaultValue: '#io-sdks-builds')

        string(name: 'CREDENTIALS_ID',
            description: 'the credentials id to get the credentials from',
            defaultValue: '496f2724-380e-4d44-9dc9-44c7f8699504')

        booleanParam(name: 'DEBUG', defaultValue: true, description: 'Turn on debug output')
        booleanParam(name: 'NO_SLACK', defaultValue: false, description: 'Turn off Slack notifications')
        booleanParam(name: 'NO_EMAIL', defaultValue: false, description: 'Turn off email notifications')
        // This is not the From: field, to change that, you either need
        // to use an Email-Ext plugin Presend Script (good luck) or you
        // have to set it globally at Jenkins -> Manage Jenkins -> System 
        // Admin e-mail address 
        string(name: 'EMAIL_REPLY_TO',
            description: 'Reply-To field for email notifications',
            defaultValue: 'cg-io-sdk-dev@adobe.onmicrosoft.com')
    }
    
    environment {
        SLACK_COLOR_DANGER  = '#E01563'
        SLACK_COLOR_INFO    = '#6ECADC'
        SLACK_COLOR_WARNING = '#FFC300'
        SLACK_COLOR_GOOD    = '#3EB991'
    }
    
    stages {
        stage('Initialize') {
            agent { label "linux" }
            steps {
                echo 'Initializing...'
                sh 'node -v'
                sh 'npm install -g npm'
                sh 'npm cache clean --force'
                sh 'npm -v'
                script {
                    // not set by branch builds, so we get and use these instead
                    GIT_COMMITTER_EMAIL = sh(returnStdout: true, script: "git show -s --pretty=%ae").trim()
                    GIT_COMMITTER_NAME = sh(returnStdout: true, script: "git show -s --pretty=%an").trim()
                    GIT_SHORT_COMMIT = sh(returnStdout: true, script: "git log -n 1 --pretty=format:'%h'").trim()
                    GIT_COMMIT_MESSAGE = sh(returnStdout: true, script: "git show -s --format=%s").trim()
                    GIT_CHANGE_URL= """${env.GIT_URL.take(env.GIT_URL.lastIndexOf('.git'))}/commit/${env.GIT_COMMIT}"""
                    // for PR builds, env.CHANGE_URL is set, we use that
                    if (env.CHANGE_URL) {
                        GIT_CHANGE_URL = env.CHANGE_URL
                    }

                    if (params.DEBUG) {
                        sh 'printenv'
                        echo "GIT_COMMITTER_EMAIL = ${GIT_COMMITTER_EMAIL}"
                        echo "GIT_COMMITTER_NAME = ${GIT_COMMITTER_NAME}"
                        echo "GIT_SHORT_COMMIT = ${GIT_SHORT_COMMIT}"
                        echo "GIT_COMMIT_MESSAGE = ${GIT_COMMIT_MESSAGE}"
                        echo "GIT_CHANGE_URL = ${GIT_CHANGE_URL}"
                    }
                }

                echo "stage.Initialize: Sending message to Slack"
                ciSendSlack("${env.SLACK_COLOR_INFO}", "STARTED", ":timer_clock:")
            }
        }
        
        stage('Checkout') {
            agent { label "linux || windows" }
            steps {
                echo 'Getting source code...'
                checkout scm
            }
        }

        stage('Build') {
            parallel {
                stage('Build on Linux') {
                    agent { label 'linux'}
                    steps {
                        echo 'Building dependencies...'
                        command 'npm install'
                    }
                }
                stage('Build on Windows') {
                    agent { label 'windows'}
                    steps {
                        echo 'Building dependencies...'
                        command 'npm install'
                    }
                }
            }
        }

        stage('Test') {
            failFast true
            parallel {
                stage('Test on Linux') {
                    agent { label 'linux' }
                    steps {
                        echo 'Testing...'
                        command 'npm test'
                    }
                }
                stage('Test on Windows') {
                    agent { label 'windows' }
                    steps {
                        echo 'Testing...'
                        command 'npm test'
                    }
                }
            }
        }

        stage('Publish') {
            agent { label "linux" }
            steps {
                echo 'Publishing Test Results...'
                junit 'junit.xml'
                echo 'Publishing Test Coverage...'
                publishHTML (target: [
                    allowMissing: false,
                    alwaysLinkToLastBuild: false,
                    keepAll: true,
                    reportDir: 'coverage/lcov-report',
                    reportFiles: 'index.html',
                    reportName: "Application Test Coverage"
                ])
            }
        }

        stage('Record Coverage') {
            agent { label "linux || windows" }
            when { branch 'master' }
            steps {
                script {
                    currentBuild.result = 'SUCCESS'
                 }
                step([$class: 'MasterCoverageAction', scmVars: [GIT_URL: env.GIT_URL]])
            }
        }

        stage('PR Coverage to Github') {
            agent { label "linux" }
            when { allOf {not { branch 'master' }; expression { return env.CHANGE_ID != null }} }
            steps {
                script {
                    currentBuild.result = 'SUCCESS'
                 }
                step([$class: 'CompareCoverageAction', scmVars: [GIT_URL: env.GIT_URL]])
            }
        }
    }

    post {
        success { onSuccess() }
        aborted { onAborted() }
        failure { onFailed()  }
    }                        
}